---
title : COVID-19 Tracker
author : Manuel Amador
date: `j Date(now())`
---

```julia; echo=false
    using Dates
```

## Code

```julia; results = "hidden"
using CSV
using DataFrames
using TimeSeries
using Dates
using Statistics
using JSON
using HTTP: get
using Plots, Plots.Measures

const _DATE_STR = r"^\d{1,2}\/\d{1,2}\/\d{2}$"
# John Hopkins database
const url_header = "https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/"

_WB_ISO2_CODES = Dict(
    "Korea, South" => "KR"
)


function get_data()
    df = Dict()

    df["global_confirmed"] = DataFrame!(CSV.File(get(url_header * "time_series_covid19_confirmed_global.csv").body))
    df["global_deaths"] = DataFrame!(CSV.File(get(url_header * "time_series_covid19_deaths_global.csv").body))
    df["us_deaths"] = DataFrame!(CSV.File(get(url_header * "time_series_covid19_deaths_US.csv").body))
    df["us_confirmed"] = DataFrame!(CSV.File(get(url_header * "time_series_covid19_confirmed_US.csv").body))
    df["countries"] = Set(df["global_confirmed"][!, "Country/Region"])

    return df
end


function get_iso2(str)
    url = "http://api.worldbank.org/v2/countries/all?per_page=25000&format=json"
    request = get(url)
    out = JSON.parse(String(request.body))
    matches = [(x["iso2Code"], x["name"]) for x in out[2] if occursin(str, x["name"])]
    if length(matches) == 1
        return matches[1][1]
    elseif isempty(matches)
        @error "No country names matches " * str
    else 
        @warn string(length(matches)) * " countries match " * str
        @warn matches
    end 
end


function get_pop(code_iso2; year=2019)
    url = "http://api.worldbank.org/v2/country/" * code_iso2 * "/indicator/SP.POP.TOTL?date=" * string(year) * "&format=json"
    request = get(url)
    out = JSON.parse(String(request.body))
    return out[2][1]["value"]
end 


function to_TimeArray(df)
    tmp = stack(df, names(df), variable_name=:date_str, variable_eltype=String)
    tmp[!, :date] = map(x -> Date(x, "mm/dd/yy") + Dates.Year(2000), tmp[!, :date_str])
    ta = TimeArray(select(tmp, :date, :value), timestamp=:date)
    return ta[Date(2020, 3, 1):Day(1):Date(2030,1,1)]
end 


function get_county(county, state, series, df)
    filtered = filter(x-> (x["Province_State"] === state) & (x["Admin2"] === county), df[series])[!, All(_DATE_STR)]
    return to_TimeArray(filtered)
end 


function get_state(state, series, df)
    filtered = filter(x-> (x["Province_State"] === state), df[series])[!, All(_DATE_STR)]
    df = mapcols(sum ∘ skipmissing, filtered)
    return to_TimeArray(df)
end 


function get_county_pc(county, state, series, df)
    pop = filter(x -> (x["Province_State"] === state) & (x["Admin2"] === county), df["us_deaths"])[1, :Population]
    ta = get_county(county, state, series, df) ./ pop .* 1_000_000.0
    return ta
end 


function get_state_pc(state, series, df)
    pop_df = filter(x-> (x["Province_State"] == state), df["us_deaths"])[!, :Population]
    pop = sum(skipmissing(pop_df))
    ta = get_state(state, series, df) ./ pop .* 1_000_000.0
    return ta
end 


function get_country(country, series, df)
    # select only data columns
    filtered = filter(x-> x["Country/Region"] === country, df[series])[!, All(_DATE_STR)]
    df = mapcols(sum ∘ skipmissing, filtered)
    return to_TimeArray(df)
end 


function get_country_pc(country, series, df)
    iso2 = country in keys(_WB_ISO2_CODES) ? _WB_ISO2_CODES[country] : get_iso2(country)
    pop = get_pop(iso2) 
    ta = get_country(country, series, df)  ./ pop .* 1_000_000.0
    return ta
end


function plot_helper(ta)
    ta_ma = lead(moving(mean, ta, 7), 3) # moving average at the center

    fig = plot(ta, ribbon=(0.0 .* values(ta), -values(ta)), linewidth=2, legend=false)
    plot!(fig, ta_ma, color=:black, linewidth=2, legend=false)
    return fig 
end


function my_diff(ts)
    max.(diff(ts), 0)
end


function plot_country_pc_daily(country, df)
    ta = my_diff(get_country_pc(country, "global_deaths", df))
    fig1 = plot_helper(ta)
    title!(fig1, country * ", deaths", titlelocation=:left, top_margin=[5mm 0mm])
    ylabel!(fig1, "daily per million")

    ta = my_diff(get_country_pc(country, "global_confirmed", df))
    fig2 = plot_helper(ta)
    title!(fig2, country * ", confirmed cases", titlelocation=:left, top_margin=[5mm 0mm])
    ylabel!(fig2, "daily per million")

    plot(fig1, fig2, size=(900, 300), layout=2)
end 


function plot_county_pc_daily(county, state, df)
    ta = my_diff(get_county_pc(county, state, "us_deaths", df))
    fig1 = plot_helper(ta)
    title!(fig1, county * ", " * state * ", deaths", titlelocation=:left, top_margin=[5mm 0mm])
    ylabel!(fig1, "daily per million")

    ta = my_diff(get_county_pc(county, state, "us_confirmed", df))
    fig2 = plot_helper(ta)
    title!(fig2, county * ", " * state * ", confirmed cases", titlelocation=:left, top_margin=[5mm 0mm])
    ylabel!(fig2, "daily per million")

    plot(fig1, fig2, size=(900, 300), layout=2)
end 


function plot_state_pc_daily(state, df)
    ta = my_diff(get_state_pc(state, "us_deaths", df))
    fig1 = plot_helper(ta)
    title!(fig1, state * ", deaths", titlelocation=:left, top_margin=[5mm 0mm])
    ylabel!(fig1, "daily per million")

    ta = my_diff(get_state_pc(state, "us_confirmed", df))
    fig2 = plot_helper(ta)
    title!(fig2, state * ", confirmed cases", titlelocation=:left, top_margin=[5mm 0mm])
    ylabel!(fig2, "daily per million")

    plot(fig1, fig2, size=(900, 300), layout=2)
end 
```

## Getting the data

```julia; results = "hidden"
df = get_data()
```

## US County/State plots

```julia
plot_county_pc_daily("Hennepin", "Minnesota", df)
```

```julia
plot_state_pc_daily("Texas", df)
```

```julia
plot_state_pc_daily("California", df)
```

```julia
plot_state_pc_daily("Florida", df)
```

```julia
plot_state_pc_daily("Arizona", df)
```

```julia
plot_state_pc_daily("Massachusetts", df)
```

## Country plots

```julia
plot_country_pc_daily("Dominican Republic", df)
```

```julia
plot_country_pc_daily("Ireland", df)
```

```julia
plot_country_pc_daily("Spain", df)
```

```julia
plot_country_pc_daily("Italy", df)
```

```julia
plot_country_pc_daily("United Kingdom", df)
```

```julia
plot_country_pc_daily("Chile", df)
```

```julia
plot_country_pc_daily("Brazil", df)
```

```julia
plot_country_pc_daily("Peru", df)
```

```julia
plot_country_pc_daily("Ecuador", df)
```

```julia
plot_country_pc_daily("Mexico", df)
```

```julia
plot_country_pc_daily("Uruguay", df)
```

```julia
plot_country_pc_daily("Haiti", df)
```

```julia
plot_country_pc_daily("Norway", df)
```

```julia
plot_country_pc_daily("Denmark", df)
```

```julia
plot_country_pc_daily("Sweden", df)
```
